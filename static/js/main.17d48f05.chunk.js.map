{"version":3,"sources":["components/Navbar.js","helpers/typeColors/typeColors.js","helpers/typeColors/typeColorsCards.js","services/pokemon.service.js","components/Pokemons.js","components/Pokemon.js","components/Pokedex.js","helpers/themes/GlobalStyles.js","helpers/themes/themes.js","App.js","helpers/themes/useDarkMode.js","serviceWorker.js","index.js","assets/pokeball.png","assets/pokedex.png"],"names":["Navbar","checkboxTheme","useState","isOpen","setIsOpen","dark","expand","to","className","src","pokeball","alt","width","height","onClick","id","navbar","left","active","right","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","psychic","steel","electric","fighting","flying","grass","ice","poison","rock","water","typeColorsCards","search","axios","get","iPokemonNumber","pokemonNumber","min","Math","ceil","max","floor","random","Pokemons","pokedex","setPokedex","typePokemon","setTypePokemon","loading","setLoading","useEffect","document","title","fetchPokemons","a","i","getPokemon","idPokemon","PokemonService","then","response","data","state","sort","b","error","console","log","md","onChange","e","generation","target","value","handleChangeGeneration","handleType","role","filter","p","types","length","type","name","includes","map","pokemon","key","style","backgroundColor","sprites","front_default","Pokemon","props","setSearch","undefined","setPokemon","setError","selectPokemon","match","params","history","push","onSubmit","preventDefault","handleSubmit","label","activeItem","showControls","showIndicators","slide","itemId","back_default","front_shiny","back_shiny","abilities","ability","stats","stat","base_stat","Pokedex","message","setMessage","setIPokemonNumber","setPokemonNumber","encounterWildPokemon","background","pokedexImg","pokemonId","GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","darkTheme","App","setTheme","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeToggler","themeMode","color","checked","htmlFor","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.17d48f05.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse } from \"mdbreact\";\r\nimport { Link } from 'react-router-dom';\r\nimport pokeball from '../assets/pokeball.png';\r\n\r\nexport const Navbar = ({ checkboxTheme }) => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggleCollapse = () => {\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    return (\r\n\r\n        <MDBNavbar dark expand=\"md\" >\r\n            <MDBNavbarBrand>\r\n                <Link to=\"/\">\r\n                    <img className=\"white-text\" src={pokeball} alt=\"pokeball\" width=\"40\" height=\"35\" />\r\n                </Link>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarToggler onClick={toggleCollapse} />\r\n            <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\r\n                <MDBNavbarNav left>\r\n                    <MDBNavItem active>\r\n                        <MDBNavLink to={\"/\"}>Home</MDBNavLink>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem>\r\n                        <MDBNavLink to={\"/pokedex\"}>Catch 'Em All</MDBNavLink>\r\n                    </MDBNavItem>\r\n                </MDBNavbarNav>\r\n                <MDBNavbarNav right>\r\n                    {checkboxTheme}\r\n                </MDBNavbarNav>\r\n            </MDBCollapse>\r\n        </MDBNavbar>\r\n\r\n    )\r\n\r\n}","export const typeColors = {\r\n    bug: '#A8B820',\r\n    dragon: '#7038F8',\r\n    fairy: '#EE99AC',\r\n    fire: '#F08030',\r\n    ghost: '#705898',\r\n    ground: '#E0C068',\r\n    normal: '#A8A878',\r\n    psychic: '#F85888',\r\n    steel: '#B8B8D0',\r\n    dark: '#705848',\r\n    electric: '#F8D030',\r\n    fighting: '#C03028',\r\n    flying: '#A890F0',\r\n    grass: '#78C850',\r\n    ice: '#98D8D8',\r\n    poison: '#A040A0',\r\n    rock: '#B8A038',\r\n    water: '#6890F0'\r\n}","export const typeColorsCards = {\r\n    bug: '#C6D16E',\r\n    dragon: '#A27DFA',\r\n    fairy: '#F4BDC9',\r\n    fire: '#F5AC78',\r\n    ghost: '#A292BC',\r\n    ground: '#EBD69D',\r\n    normal: '#C6C6A7',\r\n    psychic: '#FA92B2',\r\n    steel: '#D1D1E0',\r\n    dark: '#A29288',\r\n    electric: '#FAE078',\r\n    fighting: '#D67873',\r\n    flying: '#C6B7F5',\r\n    grass: '#A7DB8D',\r\n    ice: '#BCE6E6',\r\n    poison: '#C183C1',\r\n    rock: '#D1C17D',\r\n    water: '#9DB7F5'\r\n}","import axios from 'axios';\r\n\r\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon/\";\r\n\r\nconst getPokemon = (search) => {\r\n    return axios.get(API_URL + search);\r\n}\r\n\r\nconst getpokemonId = (iPokemonNumber, pokemonNumber) => {\r\n    const min = Math.ceil(iPokemonNumber);\r\n    const max = Math.floor(pokemonNumber);\r\n\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default {\r\n    getPokemon,\r\n    getpokemonId,\r\n};\r\n","import React, { useState, Fragment, useEffect } from 'react';\r\nimport { MDBRow, MDBCol, MDBCard } from 'mdbreact';\r\nimport { typeColors } from '../helpers/typeColors/typeColors';\r\nimport { typeColorsCards } from '../helpers/typeColors/typeColorsCards';\r\nimport PokemonService from '../services/pokemon.service';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Pokemons = () => {\r\n\r\n    const [pokedex, setPokedex] = useState([]);\r\n    const [typePokemon, setTypePokemon] = useState(\"bug\");\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Poke-App\";\r\n        fetchPokemons(1, 151);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const fetchPokemons = async (iPokemonNumber, pokemonNumber) => {\r\n\r\n        for (let i = iPokemonNumber; i < pokemonNumber; i++) {\r\n            getPokemon(i);\r\n        }\r\n\r\n    }\r\n\r\n    const getPokemon = async (idPokemon) => {\r\n\r\n        PokemonService.getPokemon(idPokemon).then(\r\n            (response) => {\r\n                setPokedex(pokedex => [...pokedex, response.data]);\r\n\r\n                setPokedex(state => {\r\n                    state.sort((a, b) => (a.id - b.id));\r\n                    return state;\r\n                });\r\n\r\n                setLoading(false);\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    const handleChangeGeneration = (e) => {\r\n        const generation = e.target.value;\r\n\r\n        setLoading(true);\r\n\r\n        switch (generation) {\r\n            case \"1\":\r\n                fetchPokemons(1, 151);\r\n                break;\r\n\r\n            case \"2\":\r\n                fetchPokemons(152, 251);\r\n                break;\r\n\r\n            case \"3\":\r\n                fetchPokemons(252, 386);\r\n\r\n                break;\r\n\r\n            case \"4\":\r\n                fetchPokemons(387, 493);\r\n                break;\r\n\r\n            case \"5\":\r\n                fetchPokemons(494, 649);\r\n                break;\r\n\r\n            case \"6\":\r\n                fetchPokemons(650, 721);\r\n                break;\r\n\r\n            case \"7\":\r\n                fetchPokemons(722, 809);\r\n                break;\r\n\r\n            case \"8\":\r\n                fetchPokemons(810, 890);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setPokedex([]);\r\n\r\n        fetchPokemons();\r\n\r\n    }\r\n\r\n    const handleType = (e) => {\r\n        const type = e.target.value;\r\n\r\n        switch (type) {\r\n            case \"bug\":\r\n                setTypePokemon(\"bug\");\r\n                break;\r\n\r\n            case \"dragon\":\r\n                setTypePokemon(\"dragon\");\r\n                break;\r\n\r\n            case \"fairy\":\r\n                setTypePokemon(\"fairy\");\r\n                break;\r\n\r\n            case \"fire\":\r\n                setTypePokemon(\"fire\");\r\n                break;\r\n\r\n            case \"ground\":\r\n                setTypePokemon(\"ground\");\r\n                break;\r\n\r\n            case \"normal\":\r\n                setTypePokemon(\"normal\");\r\n                break;\r\n\r\n            case \"psychic\":\r\n                setTypePokemon(\"psychic\");\r\n                break;\r\n\r\n            case \"steel\":\r\n                setTypePokemon(\"steel\");\r\n                break;\r\n\r\n            case \"dark\":\r\n                setTypePokemon(\"dark\");\r\n                break;\r\n\r\n            case \"electric\":\r\n                setTypePokemon(\"electric\");\r\n                break;\r\n\r\n            case \"fighting\":\r\n                setTypePokemon(\"fighting\");\r\n                break;\r\n\r\n            case \"flying\":\r\n                setTypePokemon(\"flying\");\r\n                break;\r\n\r\n            case \"grass\":\r\n                setTypePokemon(\"grass\");\r\n                break;\r\n\r\n            case \"ice\":\r\n                setTypePokemon(\"ice\");\r\n                break;\r\n\r\n            case \"poison\":\r\n                setTypePokemon(\"poison\");\r\n                break;\r\n\r\n            case \"rock\":\r\n                setTypePokemon(\"rock\");\r\n                break;\r\n\r\n            case \"water\":\r\n                setTypePokemon(\"water\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        < Fragment >\r\n\r\n            <MDBRow className=\"justify-content-center p-2\">\r\n\r\n                <MDBCol md=\"3\" className=\"pt-2 text-center\">\r\n\r\n                    <select className=\"form-control\" onChange={(e) => handleChangeGeneration(e)} >\r\n                        <option value=\"1\">First generation</option>\r\n                        <option value=\"2\">Second generation</option>\r\n                        <option value=\"3\">Third generation</option>\r\n                        <option value=\"4\">Fourth generation</option>\r\n                        <option value=\"5\">Fifth generation</option>\r\n                        <option value=\"6\">Sixth generation</option>\r\n                        <option value=\"7\">Seventh generation</option>\r\n                        <option value=\"8\">Eighth generation</option>\r\n                    </select>\r\n\r\n                </MDBCol>\r\n\r\n                <MDBCol md=\"3\" className=\"pt-2 text-center\">\r\n\r\n                    <select className=\"form-control\" onChange={(e) => handleType(e)} >\r\n                        <option value=\"bug\">Type Bug</option>\r\n                        <option value=\"dragon\">Type dragon</option>\r\n                        <option value=\"fairy\">Type fairy</option>\r\n                        <option value=\"fire\">Type fire</option>\r\n                        <option value=\"ground\">Type ground</option>\r\n                        <option value=\"normal\">Type normal</option>\r\n                        <option value=\"psychic\">Type psychic</option>\r\n                        <option value=\"steel\">Type steel</option>\r\n                        <option value=\"dark\">Type dark</option>\r\n                        <option value=\"electric\">Type electric</option>\r\n                        <option value=\"fighting\">Type fighting</option>\r\n                        <option value=\"flying\">Type flying</option>\r\n                        <option value=\"grass\">Type grass</option>\r\n                        <option value=\"ice\">Type ice</option>\r\n                        <option value=\"poison\">Type poison</option>\r\n                        <option value=\"water\">Type water</option>\r\n                    </select>\r\n\r\n                </MDBCol>\r\n\r\n            </MDBRow>\r\n\r\n            <MDBRow className=\"justify-content-center p-3\">\r\n\r\n                {loading ? <div className=\"mx-auto\">\r\n                    <div className=\"spinner-border text-info\" role=\"status\">\r\n                    </div>\r\n                </div>\r\n\r\n                    : (pokedex.filter(p => (p.types.length === 2) ? p.types[0].type.name.includes(typePokemon) || p.types[1].type.name.includes(typePokemon) : p.types[0].type.name.includes(typePokemon)).map(pokemon => {\r\n                        return (\r\n\r\n                            <MDBCol md=\"3\" className=\"p-2 text-center\" key={pokemon.id}>\r\n                                <MDBCard className=\"pointer\" style={{ backgroundColor: typeColorsCards[pokemon.types[0].type.name] }} >\r\n                                    <div className=\"text-capitalize font-weight-bold pt-2\">\r\n                                        {pokemon.name} (#{pokemon.id})\r\n                                        </div>\r\n                                    <Link to={\"/pokemons/\" + pokemon.id}>\r\n\r\n                                        <img className=\"sprite\" src={pokemon.sprites.front_default} alt={pokemon.name}\r\n                                        />\r\n\r\n                                        <div className=\"container text-center mb-3\">\r\n\r\n                                            {\r\n                                                pokemon.types.map((type, i) => {\r\n                                                    return (\r\n                                                        <div key={i} className=\"type text-uppercase font-weight-bolder text-black\" style={{ backgroundColor: typeColors[type.type.name] }}>\r\n                                                            {type.type.name}\r\n                                                        </div>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </div>\r\n                                    </Link>\r\n\r\n                                </MDBCard>\r\n                            </MDBCol>\r\n\r\n                        )\r\n                    })\r\n                    )\r\n                }\r\n\r\n            </MDBRow>\r\n\r\n        </Fragment >\r\n\r\n    )\r\n\r\n}","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { MDBProgress, MDBCard, MDBInput, MDBCardTitle, MDBCardText, MDBRow, MDBCol } from 'mdbreact';\r\nimport { MDBCarousel, MDBCarouselInner, MDBCarouselItem, MDBView } from 'mdbreact'\r\nimport { typeColors } from '../helpers/typeColors/typeColors';\r\nimport { typeColorsCards } from '../helpers/typeColors/typeColorsCards';\r\nimport PokemonService from '../services/pokemon.service';\r\n\r\nexport const Pokemon = (props) => {\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n    const [pokemon, setPokemon] = useState(undefined);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        document.title = \"Pokemon\";\r\n        selectPokemon(props.match.params.id);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        selectPokemon(search);\r\n    }\r\n\r\n    const selectPokemon = (search) => {\r\n\r\n        if (search === \"\") {\r\n            setError(\"Please insert a pokemon name.\");\r\n            return pokemon;\r\n        }\r\n\r\n        PokemonService.getPokemon(search).then(\r\n            (response) => {\r\n                setPokemon(response.data);\r\n                props.history.push(`/pokemons/${search}`);\r\n                setError(\"\");\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n                setError(\"Pokemon not found.\");\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment >\r\n\r\n            <MDBRow className=\"justify-content-center p-3\">\r\n\r\n                <MDBCol md=\"5\">\r\n\r\n                    <form onSubmit={(e) => handleSubmit(e)}>\r\n\r\n                        <MDBInput label=\"Pokemon name\" onChange={(e) => setSearch(e.target.value)} />\r\n                    </form>\r\n\r\n                    {(error === '') ? '' : <div className=\"mt-4 text-center\">{error}</div>}\r\n\r\n                </MDBCol>\r\n\r\n            </MDBRow>\r\n\r\n            {\r\n                pokemon && (<MDBRow className=\"justify-content-center m-2\" >\r\n\r\n                    <MDBCol md=\"4\">\r\n                        <MDBCard className=\"p-2\" style={{ backgroundColor: typeColorsCards[pokemon.types[0].type.name] }}>\r\n                            <MDBCarousel\r\n                                activeItem={1}\r\n                                length={4}\r\n                                showControls={true}\r\n                                showIndicators={false}\r\n                                slide\r\n                            >\r\n                                <MDBCarouselInner >\r\n                                    <MDBCarouselItem itemId=\"1\">\r\n                                        <MDBView>\r\n                                            <img\r\n                                                className=\"sprite\"\r\n                                                src={pokemon.sprites.front_default}\r\n                                                alt=\"First slide\"\r\n                                                height=\"150\"\r\n                                            />\r\n                                        </MDBView>\r\n                                    </MDBCarouselItem>\r\n                                    <MDBCarouselItem itemId=\"2\">\r\n                                        <MDBView>\r\n                                            <img\r\n                                                className=\"sprite\"\r\n                                                src={pokemon.sprites.back_default}\r\n                                                alt=\"Second slide\"\r\n                                                height=\"150\"\r\n                                            />\r\n                                        </MDBView>\r\n                                    </MDBCarouselItem>\r\n                                    <MDBCarouselItem itemId=\"3\">\r\n                                        <MDBView>\r\n                                            <img\r\n                                                className=\"sprite\"\r\n                                                src={pokemon.sprites.front_shiny}\r\n                                                alt=\"Second slide\"\r\n                                                height=\"150\"\r\n                                            />\r\n                                        </MDBView>\r\n                                    </MDBCarouselItem>\r\n                                    <MDBCarouselItem itemId=\"4\">\r\n                                        <MDBView>\r\n                                            <img\r\n                                                className=\"sprite\"\r\n                                                src={pokemon.sprites.back_shiny}\r\n                                                alt=\"Second slide\"\r\n                                                height=\"150\"\r\n                                            />\r\n                                        </MDBView>\r\n                                    </MDBCarouselItem>\r\n                                </MDBCarouselInner>\r\n                            </MDBCarousel>\r\n\r\n                            <MDBCardTitle className=\"text-center text-uppercase font-weight-bold text-black\">{pokemon.name}</MDBCardTitle>\r\n                            <div className=\"container text-center mb-3\">\r\n                                {\r\n                                    pokemon.types.map((type, i) => {\r\n                                        return (\r\n                                            <div key={i} className=\"type text-uppercase\" style={{ backgroundColor: typeColors[type.type.name] }}>\r\n                                                {type.type.name}\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n\r\n                                }\r\n\r\n                            </div>\r\n\r\n                            <div className=\"d-flex flex-row pt-3\">\r\n\r\n                                <div className=\"text-uppercase font-weight-bold pr-2\">Ability:</div>\r\n\r\n                                {\r\n                                    pokemon.abilities.map((ability, i) => {\r\n                                        return (\r\n                                            <div key={i}><p>{ability.ability.name}</p></div>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </div>\r\n\r\n                            <MDBCardText  >\r\n\r\n                                {\r\n                                    pokemon.stats.map((stat, key) => {\r\n                                        return (\r\n                                            <div key={key}>\r\n\r\n                                                <div className=\"text-capitalize font-weight-bold\">{stat.stat.name}: </div>\r\n                                                <MDBProgress value={stat.base_stat} max={255} />\r\n\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </MDBCardText>\r\n\r\n                        </MDBCard>\r\n\r\n                    </MDBCol>\r\n\r\n                </MDBRow>)\r\n\r\n            }\r\n\r\n        </Fragment >\r\n\r\n    )\r\n}","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { MDBCardTitle, MDBRow, MDBCol, } from 'mdbreact';\r\nimport PokemonService from '../services/pokemon.service';\r\nimport pokedexImg from '../assets/pokedex.png';\r\n\r\nexport const Pokedex = () => {\r\n\r\n    const [pokedex, setPokedex] = useState([]);\r\n\r\n    const [pokemon, setPokemon] = useState({});\r\n\r\n    const [message, setMessage] = useState(\"You haven't caught any pokemon yet. What are you waiting for?\");\r\n\r\n    const [iPokemonNumber, setIPokemonNumber] = useState(1);\r\n\r\n    const [pokemonNumber, setPokemonNumber] = useState(151);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Catch 'Em All\";\r\n        encounterWildPokemon();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const encounterWildPokemon = () => {\r\n\r\n        PokemonService.getPokemon(PokemonService.getpokemonId(iPokemonNumber, pokemonNumber)).then(\r\n            (response) => {\r\n                setPokemon(response.data);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    const catchPokemon = () => {\r\n\r\n        setPokedex(state => {\r\n            const pokemonExists = (state.filter(p => pokemon.id === p.id).length > 0);\r\n\r\n            if (!pokemonExists) {\r\n                state = [...state, pokemon];\r\n                state.sort((a, b) => (a.id - b.id));\r\n\r\n                return state;\r\n            }\r\n        });\r\n\r\n        if (pokedex.length === 0) setMessage(\"\");\r\n\r\n        encounterWildPokemon();\r\n\r\n    }\r\n\r\n    const removePokemon = (pokemonId) => {\r\n        setPokedex(state => state.filter(p => p.id !== pokemonId));\r\n    }\r\n\r\n    const handleChangeGeneration = (e) => {\r\n        const generation = e.target.value;\r\n\r\n        switch (generation) {\r\n            case \"1\":\r\n                setIPokemonNumber(1);\r\n                setPokemonNumber(151);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            case \"2\":\r\n                setIPokemonNumber(152);\r\n                setPokemonNumber(251);\r\n                encounterWildPokemon(152, 251);\r\n                break;\r\n\r\n            case \"3\":\r\n                setIPokemonNumber(252);\r\n                setPokemonNumber(386);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            case \"4\":\r\n                setIPokemonNumber(387);\r\n                setPokemonNumber(493);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            case \"5\":\r\n                setIPokemonNumber(494);\r\n                setPokemonNumber(649);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            case \"6\":\r\n                setIPokemonNumber(650);\r\n                setPokemonNumber(721);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            case \"7\":\r\n                setIPokemonNumber(722);\r\n                setPokemonNumber(809);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            case \"8\":\r\n                setIPokemonNumber(810);\r\n                setPokemonNumber(890);\r\n                encounterWildPokemon();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <MDBRow className=\"justify-content-center p-3\" style={{ background: \"firebrick\" }} >\r\n                <MDBCol md=\"3\">\r\n                    <MDBCardTitle className=\"text-center text-uppercase text-white\">wild encounter</MDBCardTitle>\r\n\r\n                    <img className=\"sprite\" alt={pokemon.name} src={pokemon.sprites ? \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + pokemon.id + \".png\" : \"\"}\r\n                    />\r\n\r\n                    <MDBCardTitle className=\"text-center text-uppercase font-weight-bold text-white\">{pokemon.name}</MDBCardTitle>\r\n                    <button className=\"catch-btn text-uppercase font-weight-bold\" onClick={() => catchPokemon()}>catch!</button>\r\n                </MDBCol>\r\n            </MDBRow>\r\n\r\n            <div className=\"d-flex flex-row pt-3 pl-2 pr-2\">\r\n                <img className=\"pl-1\" src={pokedexImg} alt=\"pokeball\" width=\"50\" height=\"35\" />\r\n                <div className=\"pt-1 ml-2\"><h3 className=\"text-uppercase text-black font-weight-bold\">pokedex</h3></div>\r\n                <div className=\"pt-0 ml-4\">\r\n                    <select className=\"form-control\" onChange={(e) => handleChangeGeneration(e)} >\r\n                        <option value=\"1\">1st generation</option>\r\n                        <option value=\"2\">2nd generation</option>\r\n                        <option value=\"3\">3rd generation</option>\r\n                        <option value=\"4\">4th generation</option>\r\n                        <option value=\"5\">5th generation</option>\r\n                        <option value=\"6\">6th generation</option>\r\n                        <option value=\"7\">7th generation</option>\r\n                        <option value=\"8\">8th generation</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                message && (\r\n                    <div className=\"pt-3 ml-3 mr-1\"><MDBCardTitle className=\"h5 text-capitalize text-black font-weight-bold\">{message}</MDBCardTitle></div>\r\n                )\r\n            }\r\n\r\n            <MDBRow className=\"justify-content-center p-3\" >\r\n\r\n                {\r\n\r\n                    pokedex && (pokedex.map((p) => (\r\n                        <MDBCol key={p.id} className=\"card-pokedex\" md=\"2\">\r\n                            <button className=\"btn-remove\" onClick={() => removePokemon(p.id)}><i className=\"fas fa-times\"></i></button>\r\n\r\n                            <img className=\"sprite\" alt={p.name} src={\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + p.id + \".png\"}\r\n                            />\r\n                            <MDBCardTitle className=\"text-center text-uppercase font-weight-bold text-black\">#{p.id}</MDBCardTitle>\r\n                            <MDBCardTitle className=\"text-center text-uppercase font-weight-bold text-black\">{p.name}</MDBCardTitle>\r\n                        </MDBCol>\r\n\r\n                    ))\r\n                    )\r\n\r\n                }\r\n\r\n            </MDBRow>\r\n\r\n        </Fragment >\r\n\r\n    )\r\n}","import { createGlobalStyle } from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    transition: all 0.3s linear;\r\n  }\r\n\r\n  `","export const lightTheme = {\r\n    body: '#00b4d8',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    background: '#363537',\r\n}\r\nexport const darkTheme = {\r\n    body: '#190B28',\r\n    text: '#f7fff7',\r\n    toggleBorder: '#6B8096',\r\n    background: '#999',\r\n}","import React from 'react';\nimport './App.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { Navbar } from './components/Navbar';\nimport { Pokemons } from './components/Pokemons';\nimport { Pokemon } from './components/Pokemon';\nimport { Pokedex } from './components/Pokedex';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./helpers/themes/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./helpers/themes/themes\";\nimport { useDarkMode } from \"./helpers/themes/useDarkMode\";\n\nfunction App() {\n\n  const [theme, themeToggler] = useDarkMode();\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\n\n  const checkboxTheme = (\n    <div className=\"toggle-container\">\n      <span style={{ color: themeMode === darkTheme ? \"grey\" : \"yellow\" }}>☀︎</span>\n      <span className=\"toggle\">\n        <input\n          onChange={themeToggler}\n          id=\"checkbox\"\n          className=\"checkbox\"\n          type=\"checkbox\"\n          checked={themeMode === darkTheme ? true : false}\n        />\n        <label htmlFor=\"checkbox\" />\n      </span>\n      <span style={{ color: themeMode === darkTheme ? \"slateblue\" : \"grey\" }}>☾</span>\n    </div>\n  )\n\n  return (\n\n    <ThemeProvider theme={themeMode}>\n      <>\n        <GlobalStyles />\n\n        <div className=\"view\">\n\n          <BrowserRouter>\n\n            <Navbar checkboxTheme={checkboxTheme} />\n\n            <Switch>\n\n              <Route exact path=\"/\" component={Pokemons} />\n              <Route path=\"/pokemons/:id\" component={Pokemon} />\n              <Route exact path=\"/pokedex\" component={Pokedex} />\n\n            </Switch>\n\n          </BrowserRouter>\n\n        </div>\n      </>\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\r\nexport const useDarkMode = () => {\r\n    const [theme, setTheme] = useState('light');\r\n\r\n    const setMode = mode => {\r\n        window.localStorage.setItem('theme', mode)\r\n        setTheme(mode)\r\n    };\r\n\r\n    const themeToggler = () => {\r\n        theme === 'light' ? setMode('dark') : setMode('light')\r\n    };\r\n\r\n    useEffect(() => {\r\n        const localTheme = window.localStorage.getItem('theme');\r\n        localTheme && setTheme(localTheme)\r\n    }, []);\r\n    return [theme, themeToggler]\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pokeball.468f7826.png\";","module.exports = __webpack_public_path__ + \"static/media/pokedex.05432715.png\";"],"sourceRoot":""}